const AI_ENDPOINT = "/api/ai";

type Lesson = { title: string; content: string; duration: number; order: number }
type Chapter = { title: string; order: number; lessons: Lesson[] }
type Course = { title: string; description: string; level: string; duration: number; chapters: Chapter[] }

function enforceCourseStructure(raw: any, topic: string): Course {
  const safe = (raw && typeof raw === 'object') ? raw : {}
  const title = typeof safe.title === 'string' && safe.title.trim() ? safe.title : `Ma√Ætriser ${topic}`
  const description = typeof safe.description === 'string' && safe.description.trim() ? safe.description : `Un parcours guid√© pour progresser sur ${topic} dans Excel.`
  const level = typeof safe.level === 'string' && safe.level.trim() ? safe.level : 'BEGINNER'
  const duration = typeof safe.duration === 'number' && safe.duration > 0 ? safe.duration : 60
  let chapters: Chapter[] = Array.isArray(safe.chapters) ? safe.chapters : []

  // Ensure chapter orders and minimum count (>=4)
  const ensureLesson = (titleSeed: string, order: number): Lesson => ({
    title: `${titleSeed} ${order}`,
    content: `# ${titleSeed} ${order}

## Introduction

Dans cette le√ßon, nous allons explorer en d√©tail ${titleSeed.toLowerCase()} dans le contexte de ${topic}. Cette approche vous permettra de ma√Ætriser les concepts fondamentaux tout en d√©veloppant une expertise pratique.

## Objectifs d'apprentissage

- Comprendre les principes de base de ${titleSeed.toLowerCase()}
- Appliquer ces concepts dans des situations r√©elles
- D√©velopper des bonnes pratiques professionnelles

## Contenu d√©taill√©

### √âtape 1 : Pr√©paration

Avant de commencer, assurez-vous d'avoir Excel ouvert et un nouveau classeur pr√™t. Cette pr√©paration est essentielle pour suivre les exemples pratiques.

### √âtape 2 : Application pratique

Nous allons maintenant voir comment appliquer ${titleSeed.toLowerCase()} dans ${topic} :

1. **Premi√®re approche** : M√©thode traditionnelle
2. **Approche optimis√©e** : Techniques avanc√©es
3. **Bonnes pratiques** : Conseils d'experts

### √âtape 3 : Exemples concrets

**Exemple 1 :** Cas d'usage simple
- Contexte : Situation courante en entreprise
- Solution : Approche √©tape par √©tape
- R√©sultat : Gain de temps et d'efficacit√©

**Exemple 2 :** Cas d'usage avanc√©
- Contexte : Probl√®me complexe
- Solution : Techniques expertes
- R√©sultat : Solution professionnelle

## Points cl√©s √† retenir

- ‚úÖ ${titleSeed} est essentiel pour ma√Ætriser ${topic}
- ‚úÖ La pratique r√©guli√®re am√©liore la comp√©tence
- ‚úÖ Les bonnes pratiques font la diff√©rence

## Exercice pratique

**Objectif :** Mettre en pratique ${titleSeed.toLowerCase()}

**Instructions :**
1. Ouvrez Excel
2. Cr√©ez un nouveau classeur
3. Appliquez les techniques apprises
4. V√©rifiez votre r√©sultat

**Astuce :** N'h√©sitez pas √† exp√©rimenter et √† adapter les techniques √† vos besoins sp√©cifiques.

## Conclusion

Vous avez maintenant les bases pour utiliser efficacement ${titleSeed.toLowerCase()} dans ${topic}. La prochaine le√ßon approfondira ces concepts avec des cas d'usage plus complexes.`,
    duration: 15,
    order,
  })

  const defaultChapterTitle = (idx: number) => {
    const names = [
      `Fondamentaux de ${topic}`,
      `Fonctions cl√©s de ${topic}`,
      `Pratique guid√©e ${topic}`,
      `Cas concrets ${topic}`,
      `Bonnes pratiques ${topic}`,
      `Pi√®ges et astuces ${topic}`,
    ]
    return names[idx] || `${topic} - Section ${idx + 1}`
  }

  // Normalize existing chapters
  chapters = chapters.map((ch: any, i: number) => {
    const chTitle = typeof ch?.title === 'string' && ch.title.trim() ? ch.title : defaultChapterTitle(i)
    let lessons: Lesson[] = Array.isArray(ch?.lessons) ? ch.lessons : []
    // Ensure at least 2 lessons per chapter
    if (lessons.length < 2) {
      const base = chTitle.replace(/^(Chapitre\s*\d+[:\-]\s*)?/i, '').trim() || topic
      const needed = 2 - lessons.length
      for (let k = 0; k < needed; k++) {
        lessons.push(ensureLesson(base, lessons.length + 1))
      }
    }
    // Normalize lesson fields and orders
    lessons = lessons.map((ls: any, idx: number) => ({
      title: typeof ls?.title === 'string' && ls.title.trim() ? ls.title : `${chTitle} ‚Äî Le√ßon ${idx + 1}`,
      content: typeof ls?.content === 'string' && ls.content.trim() ? ls.content : `# ${chTitle} ‚Äî Le√ßon ${idx + 1}

## Introduction

Bienvenue dans cette le√ßon d√©di√©e √† ${topic}. Nous allons explorer ensemble les concepts essentiels qui vous permettront de progresser efficacement.

## Objectifs p√©dagogiques

- Ma√Ætriser les fondamentaux de ${topic}
- D√©velopper une approche m√©thodique
- Acqu√©rir des r√©flexes professionnels

## Contenu de la le√ßon

### 1. Concepts th√©oriques

${topic} est un domaine riche qui n√©cessite une approche structur√©e. Voici les √©l√©ments cl√©s √† comprendre :

**Point important :** La th√©orie doit toujours √™tre accompagn√©e de pratique pour une meilleure assimilation.

### 2. Applications pratiques

Voyons maintenant comment appliquer ces concepts dans des situations concr√®tes :

#### Exemple pratique 1
- **Contexte :** Situation professionnelle courante
- **D√©marche :** M√©thode √©tape par √©tape
- **R√©sultat :** Solution efficace et reproductible

#### Exemple pratique 2
- **Contexte :** Cas d'usage avanc√©
- **D√©marche :** Techniques expertes
- **R√©sultat :** Optimisation des performances

### 3. Bonnes pratiques

üí° **Astuce professionnelle :** Toujours v√©rifier vos r√©sultats et documenter votre d√©marche.

‚ö†Ô∏è **Attention :** √âvitez les erreurs courantes en suivant ces recommandations.

## Exercice d'application

**Mission :** Mettre en pratique les concepts appris

**√âtapes √† suivre :**
1. Pr√©parez votre environnement de travail
2. Appliquez la m√©thode pr√©sent√©e
3. V√©rifiez vos r√©sultats
4. Optimisez votre approche

## R√©capitulatif

Cette le√ßon vous a permis de :
- ‚úÖ Comprendre les bases de ${topic}
- ‚úÖ Voir des exemples concrets d'application
- ‚úÖ D√©couvrir les bonnes pratiques
- ‚úÖ Pratiquer avec un exercice guid√©

## Pour aller plus loin

Dans la prochaine le√ßon, nous approfondirons ces concepts avec des cas d'usage plus complexes et des techniques avanc√©es.`,
      duration: typeof ls?.duration === 'number' && ls.duration > 0 ? ls.duration : 15,
      order: typeof ls?.order === 'number' && ls.order > 0 ? ls.order : idx + 1,
    }))
    return {
      title: chTitle,
      order: typeof ch?.order === 'number' && ch.order > 0 ? ch.order : i + 1,
      lessons,
    }
  })

  // Add chapters until we have at least 4
  for (let i = chapters.length; i < 4; i++) {
    const chTitle = defaultChapterTitle(i)
    chapters.push({
      title: chTitle,
      order: i + 1,
      lessons: [ensureLesson(chTitle, 1), ensureLesson(chTitle, 2), ensureLesson(chTitle, 3)],
    })
  }

  // Re-sequence orders
  chapters = chapters
    .sort((a, b) => a.order - b.order)
    .map((ch, i) => ({ ...ch, order: i + 1, lessons: ch.lessons.map((ls, j) => ({ ...ls, order: j + 1 })) }))

  // Derive total duration if missing
  const totalDuration = chapters.reduce((sum, ch) => sum + ch.lessons.reduce((s, ls) => s + (ls.duration || 10), 0), 0)

  return {
    title,
    description,
    level,
    duration: duration || totalDuration || 60,
    chapters,
  }
}

export async function generateCourseFromTopic(topic: string) {
  const fallback: Course = enforceCourseStructure({
    title: `Introduction √† ${topic}`,
    description: `Un cours pour d√©butants sur ${topic}`,
    level: "BEGINNER",
    duration: 30,
    chapters: [
      {
        title: "Premiers pas",
        order: 1,
        lessons: [
          {
            title: "Les bases",
            content: `D√©couvrez les fondamentaux de ${topic} dans Excel`,
            duration: 10,
            order: 1,
          },
        ],
      },
    ],
  }, topic)

  try {
    const system = "Tu es un expert p√©dagogue Excel et cr√©ateur de contenu e-learning. Tu cr√©es des cours riches, interactifs et explicatifs comme ceux d'OpenClassrooms, avec du contenu multim√©dia et des explications d√©taill√©es.";
    const user = `Cr√©e un cours complet et riche sur "${topic}" au format JSON. Le contenu doit √™tre aussi explicatif et d√©taill√© que sur OpenClassrooms.

SCH√âMA JSON REQUIS:
{
  "title": "string (titre engageant et professionnel)",
  "description": "string (description d√©taill√©e des objectifs et b√©n√©fices)",
  "level": "BEGINNER"|"INTERMEDIATE"|"ADVANCED",
  "duration": number (dur√©e totale en minutes),
  "chapters": [
    {
      "title": "string (titre de chapitre clair)",
      "order": number,
      "lessons": [
        {
          "title": "string (titre de le√ßon engageant)",
          "content": "string (CONTENU TR√àS D√âTAILL√â avec explications √©tape par √©tape, exemples concrets, captures d'√©cran sugg√©r√©es, astuces pro, points d'attention, analogies pour faciliter la compr√©hension. Format Markdown avec titres, listes, code Excel, tableaux. Minimum 500 mots par le√ßon.)",
          "mediaElements": [
            {
              "type": "image|video|interactive|diagram",
              "title": "string (titre du m√©dia)",
              "description": "string (description d√©taill√©e du contenu visuel)",
              "placement": "string (o√π placer dans la le√ßon)",
              "altText": "string (texte alternatif descriptif)"
            }
          ],
          "practicalExercise": {
            "title": "string (titre de l'exercice)",
            "instructions": "string (consignes d√©taill√©es √©tape par √©tape)",
            "expectedResult": "string (r√©sultat attendu)",
            "tips": ["string (conseils pour r√©ussir)"]
          },
          "keyTakeaways": ["string (points cl√©s √† retenir)"],
          "duration": number (minutes),
          "order": number
        }
      ]
    }
  ]
}

EXIGENCES DE CONTENU (style OpenClassrooms):
‚Ä¢ Explications tr√®s d√©taill√©es avec contexte et justifications
‚Ä¢ Exemples concrets et cas d'usage r√©els
‚Ä¢ Progression p√©dagogique logique du simple au complexe
‚Ä¢ √âl√©ments visuels sugg√©r√©s (captures d'√©cran, diagrammes, vid√©os)
‚Ä¢ Exercices pratiques avec instructions pr√©cises
‚Ä¢ Points cl√©s et r√©capitulatifs
‚Ä¢ Astuces professionnelles et bonnes pratiques
‚Ä¢ Minimum 4 chapitres, 2-3 le√ßons par chapitre
‚Ä¢ Chaque le√ßon doit faire minimum 500 mots de contenu riche

R√©ponds UNIQUEMENT avec le JSON valide, sans texte suppl√©mentaire.`;
    
    const res = await fetch(AI_ENDPOINT, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ system, messages: [{ role: "user", content: user }], temperature: 0.3, max_tokens: 4000 }),
    });
    if (!res.ok) return fallback;
    const data = await res.json();
    try {
      const parsed = JSON.parse(data.content);
      return enforceCourseStructure(parsed, topic)
    } catch {
      return fallback;
    }
  } catch {
    return fallback;
  }
}

export async function generateCourse(
  chosenLevel: "BEGINNER" | "INTERMEDIATE" | "ADVANCED",
  testResult: {
    level: "BEGINNER" | "INTERMEDIATE" | "ADVANCED";
    score: number;
    result: "SUCCESS" | "FAIL";
    review: Array<{
      question: string;
      options: string[];
      userAnswer: number;
      correctAnswer: number;
      isCorrect: boolean;
      analysis: string;
    }>;
  }
) {
  // Determine the actual level based on test results
  const actualLevel = testResult.result === "SUCCESS" ? chosenLevel : 
    chosenLevel === "ADVANCED" ? "INTERMEDIATE" :
    chosenLevel === "INTERMEDIATE" ? "BEGINNER" : "BEGINNER";

  const fallback: Course = enforceCourseStructure({
    title: `Cours Excel - Niveau ${actualLevel.toLowerCase()}`,
    description: `Un parcours complet pour ma√Ætriser Excel au niveau ${actualLevel.toLowerCase()}`,
    level: actualLevel,
    duration: 120,
    chapters: [
      {
        title: "Introduction",
        order: 1,
        lessons: [
          {
            title: "Les bases d'Excel",
            content: `D√©couvrez les fondamentaux d'Excel pour le niveau ${actualLevel.toLowerCase()}`,
            duration: 15,
            order: 1,
          },
        ],
      },
    ],
  }, "Excel")

  try {
    const system = "Tu es un expert p√©dagogue Excel et cr√©ateur de contenu e-learning professionnel. Tu cr√©es des parcours d'apprentissage riches, interactifs et explicatifs comme ceux d'OpenClassrooms, avec du contenu multim√©dia d√©taill√© et des explications approfondies.";
    const user = `Analyse les r√©sultats du test de positionnement et g√©n√®re un parcours personnalis√© de tr√®s haute qualit√© p√©dagogique.

### Donn√©es du test :
- Niveau choisi par l'utilisateur : ${chosenLevel}
- Score obtenu : ${testResult.score}/10
- R√©sultat : ${testResult.result}
- Niveau r√©el valid√© : ${actualLevel}

### Analyse des erreurs :
${testResult.review.map((r, i) => `Question ${i + 1}: ${r.isCorrect ? 'Correcte' : 'Incorrecte'} - ${r.analysis}`).join('\n')}

### Structure JSON requise (style OpenClassrooms) :
{
  "title": "string (titre engageant du parcours)",
  "description": "string (description d√©taill√©e des objectifs et b√©n√©fices)",
  "level": "${actualLevel}",
  "duration": number (dur√©e totale en minutes),
  "chapters": [
    {
      "title": "string (titre de chapitre clair)",
      "order": number,
      "lessons": [
        {
          "title": "string (titre de le√ßon engageant)",
          "content": "string (CONTENU TR√àS D√âTAILL√â au format Markdown avec : explications √©tape par √©tape, exemples concrets, captures d'√©cran sugg√©r√©es, astuces pro, points d'attention, analogies pour faciliter la compr√©hension, sections avec titres ##, listes, code Excel, tableaux. Minimum 800 mots par le√ßon avec structure p√©dagogique claire.)",
          "mediaElements": [
            {
              "type": "image|video|interactive|diagram",
              "title": "string (titre du m√©dia)",
              "description": "string (description d√©taill√©e du contenu visuel)",
              "placement": "string (o√π placer dans la le√ßon)",
              "altText": "string (texte alternatif descriptif)"
            }
          ],
          "practicalExercise": {
            "title": "string (titre de l'exercice)",
            "instructions": "string (consignes d√©taill√©es √©tape par √©tape)",
            "expectedResult": "string (r√©sultat attendu)",
            "tips": ["string (conseils pour r√©ussir)"]
          },
          "keyTakeaways": ["string (points cl√©s √† retenir)"],
          "duration": number (minutes),
          "order": number
        }
      ]
    }
  ]
}

### EXIGENCES DE CONTENU (qualit√© OpenClassrooms) :
‚Ä¢ Explications tr√®s d√©taill√©es avec contexte, justifications et exemples
‚Ä¢ Progression p√©dagogique logique du simple au complexe
‚Ä¢ √âl√©ments visuels sugg√©r√©s (captures d'√©cran, diagrammes, vid√©os explicatives)
‚Ä¢ Exercices pratiques avec instructions pr√©cises et r√©sultats attendus
‚Ä¢ Points cl√©s et r√©capitulatifs pour faciliter la m√©morisation
‚Ä¢ Astuces professionnelles et bonnes pratiques d'experts
‚Ä¢ Analogies et m√©taphores pour faciliter la compr√©hension
‚Ä¢ Structure Markdown avec titres, listes, tableaux, code Excel
‚Ä¢ Minimum 4 chapitres, 2-3 le√ßons par chapitre
‚Ä¢ Chaque le√ßon doit faire minimum 800 mots de contenu riche et structur√©
‚Ä¢ Prendre en compte les erreurs du test pour renforcer les points faibles identifi√©s
‚Ä¢ Adapter le vocabulaire et la complexit√© au niveau ${actualLevel}

### CONTRAINTES TECHNIQUES :
- R√©ponds UNIQUEMENT avec un JSON valide, sans texte suppl√©mentaire
- Assure-toi que le JSON est bien form√© et complet
- Chaque le√ßon doit avoir tous les champs requis

G√©n√®re le parcours personnalis√© maintenant :`;

    const res = await fetch(AI_ENDPOINT, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ 
        system, 
        messages: [{ role: "user", content: user }], 
        temperature: 0.3, 
        max_tokens: 4000 
      }),
    });
    
    if (!res.ok) return fallback;
    const data = await res.json();
    
    try {
      const parsed = JSON.parse(data.content);
      // Convert to the expected Course format
      const course: Course = {
        title: parsed.title || fallback.title,
        description: parsed.description || fallback.description,
        level: parsed.level || actualLevel,
        duration: parsed.duration || fallback.duration,
        chapters: parsed.chapters?.map((ch: any, i: number) => ({
          title: ch.title || `Module ${i + 1}`,
          order: ch.order || i + 1,
          lessons: ch.lessons?.map((ls: any, j: number) => ({
            title: ls.title || `Le√ßon ${j + 1}`,
            content: ls.content || "Contenu de la le√ßon",
            duration: ls.duration || 15,
            order: ls.order || j + 1,
          })) || []
        })) || fallback.chapters
      };
      
      return enforceCourseStructure(course, "Excel");
    } catch {
      return fallback;
    }
  } catch {
    return fallback;
  }
}

export async function generateExercise(topic: string, difficulty: string) {
  const system = "Tu es un expert Excel. Tu g√©n√®res des exercices avec solution au format JSON strict.";
  const user = `G√©n√®re un exercice Excel sur "${topic}" de difficult√© ${difficulty}. Format JSON exact: {"title": string, "description": string, "difficulty": "${difficulty}", "content": string, "solution": string}. R√©ponds uniquement en JSON valide.`;
  const res = await fetch(AI_ENDPOINT, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ system, messages: [{ role: "user", content: user }], temperature: 0.5, max_tokens: 1000 }),
  });
  if (!res.ok) throw new Error("AI generation failed");
  const data = await res.json();
  return JSON.parse(data.content);
}

export async function generatePlacementTest(level: "BEGINNER" | "INTERMEDIATE" | "ADVANCED") {
  const fallback = {
    level,
    title: `Test de positionnement niveau ${level.toLowerCase()}`,
    questions: [
      {
        question: "Qu'est-ce qu'une cellule dans Excel ?",
        options: ["Une zone de texte", "L'intersection d'une ligne et d'une colonne", "Un graphique", "Une formule"],
        answer: 1
      },
      {
        question: "Comment commence une formule Excel ?",
        options: ["Par un espace", "Par le signe =", "Par des guillemets", "Par un nombre"],
        answer: 1
      }
    ]
  };

  try {
    const system = "Tu es un expert en Excel et en p√©dagogie. Ta mission est de cr√©er un **test de positionnement** de 10 questions pour √©valuer le niveau d'un utilisateur (BEGINNER, INTERMEDIATE ou ADVANCED).";
    const user = `Cr√©e un test de positionnement de niveau ${level} avec exactement 10 questions. 

### Sch√©ma JSON attendu
{
  "level": "${level}",
  "title": "string (titre du test, ex: 'Test de positionnement niveau ${level.toLowerCase()}')",
  "questions": [
    {
      "question": "string (√©nonc√© de la question, clair et pr√©cis)",
      "options": ["string", "string", "string", "string"],
      "answer": number (index de la bonne r√©ponse, commen√ßant √† 0)
    }
  ]
}

### Contraintes
1. Toujours g√©n√©rer **exactement 10 questions**.
2. Une seule bonne r√©ponse par question.
3. Le niveau des questions doit correspondre √† ${level}.
   - BEGINNER : notions de base (cellules, formules simples, mise en forme).
   - INTERMEDIATE : formules conditionnelles, recherches, graphiques, filtres avanc√©s.
   - ADVANCED : tableaux crois√©s dynamiques, fonctions complexes, automatisation, Power Query, macros VBA simples.
4. R√©ponds **uniquement avec un JSON valide**.

G√©n√®re le test maintenant :`;

    const res = await fetch(AI_ENDPOINT, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ 
        system, 
        messages: [{ role: "user", content: user }], 
        temperature: 0.3, 
        max_tokens: 3000 
      }),
    });

    if (!res.ok) return fallback;
    const data = await res.json();
    
    try {
      const parsed = JSON.parse(data.content);
      // Validate structure
      if (parsed.level && parsed.title && Array.isArray(parsed.questions) && parsed.questions.length === 10) {
        return parsed;
      }
      return fallback;
    } catch {
      return fallback;
    }
  } catch {
    return fallback;
  }
}

export async function correctPlacementTest(
  level: "BEGINNER" | "INTERMEDIATE" | "ADVANCED",
  questions: Array<{
    question: string;
    options: string[];
    answer: number;
  }>,
  userAnswers: number[]
) {
  const fallback = {
    level,
    score: 0,
    result: "FAIL" as const,
    review: questions.map((q, i) => ({
      question: q.question,
      options: q.options,
      userAnswer: userAnswers[i] ?? -1,
      correctAnswer: q.answer,
      isCorrect: (userAnswers[i] ?? -1) === q.answer,
      analysis: "Analyse non disponible"
    }))
  };

  try {
    const system = "Tu es un expert en Excel et en p√©dagogie. Tu dois corriger un test de 10 questions √† choix multiples, et fournir une analyse d√©taill√©e des r√©sultats.";
    const user = `Corrige ce test de positionnement Excel de niveau ${level}.

### Donn√©es du test
Niveau choisi : ${level}
Questions : ${JSON.stringify(questions)}
R√©ponses de l'utilisateur : ${JSON.stringify(userAnswers)}

### Sortie attendue
Un JSON strict avec le format suivant :

{
  "level": "${level}",
  "score": number (entre 0 et 10),
  "result": "SUCCESS" | "FAIL",
  "review": [
    {
      "question": "string (√©nonc√© de la question)",
      "options": ["string", "string", "string", "string"],
      "userAnswer": number (index de la r√©ponse choisie par l'utilisateur),
      "correctAnswer": number (index de la bonne r√©ponse),
      "isCorrect": boolean,
      "analysis": "string (explication claire : pourquoi la r√©ponse est correcte ou non, rappel de la bonne logique Excel)"
    }
  ]
}

### Contraintes
1. **Toujours corriger exactement 10 questions**.
2. \`score\` = nombre de bonnes r√©ponses.
3. \`result\` = "SUCCESS" si score ‚â• 7, sinon "FAIL".
4. L'analyse doit √™tre **p√©dagogique et d√©taill√©e**, en expliquant les erreurs √©ventuelles et en rappelant la bonne r√®gle Excel.
5. R√©ponds uniquement avec un JSON valide conforme au sch√©ma ci-dessus.

Corrige le test maintenant :`;

    const res = await fetch(AI_ENDPOINT, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ 
        system, 
        messages: [{ role: "user", content: user }], 
        temperature: 0.2, 
        max_tokens: 4000 
      }),
    });

    if (!res.ok) return fallback;
    const data = await res.json();
    
    try {
      const parsed = JSON.parse(data.content);
      // Validate structure
      if (parsed.level && typeof parsed.score === 'number' && parsed.result && Array.isArray(parsed.review) && parsed.review.length === 10) {
        return parsed;
      }
      return fallback;
    } catch {
      return fallback;
    }
  } catch {
    return fallback;
  }
}

export async function generatePersonalizedContent(userId: string) {
  // Placeholder: return beginner defaults until wired to Convex progress
  return {
    skillLevel: "BEGINNER",
    topics: [
      "Introduction √† Excel",
      "Les bases des formules",
      "Mise en forme simple",
      "Trier et filtrer des donn√©es",
      "Cr√©er des graphiques basiques",
    ],
    difficulty: "EASY",
  };
}
